Buildout integration
====================

In order to use mrsd for a buildout managed project, you add the mrs.developer
extension to buildout.

.. code-block:: console

    % cat buildout.cfg
    [buildout]
    extensions = mrs.developer
    parts = example
    develop = mrs.developer

    [example]
    recipe = zc.recipe.egg
    eggs =
        mrs.developer
        piratebay
    interpreter = example-py


Mrsd will automatically hook into all scripts generated by buildout, for now we
assume these are all scripts in ``bin``, that use sys.path[0:0] injection and
are not blacklisted, like ``bin/buildout``.

Buildout was already run for us and mrsd hooked into all scripts that exist in
``bin/`` and use sys.path injection already.

.. code-block:: console

    % ls -1

    % cat bin/example-py

Hookin will remove old hooks and recreate them

.. code-block:: console

    % ./bin/mrsd hookin
    INFO:mrsd:Hooked out: /.../bin/example-py.
    INFO:mrsd:Hooked in: /.../bin/example-py.

Mrsd now injects sys.paths into scripts

.. code-block:: console

    % grep '(mrsdpaths)' ./bin/example-py


Hookout will remove the hooks from all scripts

.. code-block:: console

    % ./bin/mrsd hookout
    INFO:mrsd:Hooked out: /.../bin/example-py.

    % ./bin/mrsd hookin
    INFO:mrsd:Hooked in: /.../bin/example-py.

.. todo:: Use .installed.cfg for finding scripts to hook into

.. todo:: hookin hookout from specific scripts

.. todo:: mrsd activate/deactivate


Distributions
=============

There are source and binary distributions. One or more binary distributions are
built from one source distribution. A binary distribution can be specific to
the target architecture and in case of python, the python version.

Channels are the source for binary and source distributions, PyPI, the Plone
collective and the buildout cache are examples.

For a detailed description of channels, see ``channel.rst``.

Normally you are using source and binary distributions from a cache, except if
you want to make changes to it. If you want to make changes to a distribution
you create a clone of it, local to your mrsd project. The commands relevant for
cloning are:

``mrsd list``
    list available distributions

``mrsd clone``
    clone a distribution into your mrsd environment

List all distributions that are used in the current project and that are not
cloned already:

.. code-block:: console

    % ./bin/mrsd clone eggs/piratebay-0.3.1-py2.6.egg 
    Initialized empty Git repository in /.../eggs-mrsd/piratebay-0.3.1-py2.6.egg/.git/
    [master (root-commit) ...] initial from: /.../eggs/piratebay-0.3.1-py2.6.egg
     ... files changed, ... insertions(+), 0 deletions(-)...

List all cloned distributions:

.. code-block:: console

    % ./bin/mrsd list
    [
        "/.../eggs/distribute-0.6.14-py2.6.egg",
        "/.../eggs/zc.buildout-1.5.1-py2.6.egg",
        "/.../eggs/piratebay-0.3.1-py2.6.egg",
        "/.../eggs/zope.location-3.9.0-py2.6.egg",
        "/.../eggs/odict-1.3.2-py2.6.egg",
        "/.../eggs/zope.proxy-3.6.1-py2.6...egg",
        "/.../eggs/zope.component-3.9.5-py2.6.egg",
        "/.../eggs/zope.schema-3.6.4-py2.6.egg",
        "/.../eggs/zope.interface-3.6.1-py2.6-...egg",
        "/.../eggs/zope.event-3.5.0_1-py2.6.egg"
    ]



.. todo::

    % mrsd list <channel>

Binary distributions
--------------------

Clone a binary distribution, it will be copied to eggs-mrsd, initialized as a
git repository with an inital commit, tagged initial, referencing the origin.
::
    % mrsd clone odict

    % ls eggs-mrsd

    % cd eggs-mrsd/odict
    
    % git log

    % git tag

In order to actually use your distribution for newly started scripts, it needs
to be activated

#.. code-block:: console

    % ./bin/example-py -c 'import piratebay; print piratebay.__file__'
    .../eggs-mrsd/piratebay-0.3.1-py2.6.egg/piratebay/__init__.pyc
    

::
    % mrsd activate zodict

    % mrsd run py -c 'import zodict; print zodict.__file'

.. todo:: implement mrsd run
.. todo:: per script activation/deactivation

Make some changes and commit some of them:
::
    % touch a b c
    % git commit -m 'committed a' a
    % git commit -m 'committed b' b
    % git log
    % git status --procelain

Persistent your changes for deployment

    % mrsd patch
    % mrsd patch generate
    % mrsd patch

    % rm eggs-mrsd

    % mrsd list

    % mrsd patch apply

    % mrsd list



Source distributions
--------------------

Clone a source distribution:
::
    % mrsd clone <sth were only source is available>

    % ls src-mrsd




Calling mList all distributions available for cloning:
::
    % mrsd clone

behind the scenes:

    % mrsd list <default_distspace>


Clone distributions:
::
    % mrsd clone <distspace>





    % mrsd clone 


    % mrsd 

List available distributions


    mrsd clone global/
    mrsd clone plonecollective/build/...
    mrsd clone cache|home|user/
    mrsd clone local/plonecollective 
    mrsd clone ./plonecollective 

    The path points to a package


``mrsd clone collective/buildout/plone.recipe.precompiler``
  point to trunk or directly 
  points to package

``mrsd clone collective/buildout/plone.recipe.precompiler/<branch>``
  a collection of distributions, a package
  points to package

``mrsd clone collective/buildout/plone.recipe.precompiler/<tag>``
  a package with only one distribution, therefore a distribution

``mrsd clone collective/buildout/plone.recipe.precompiler/<branch>/subdir?rev=134255``
  version/revision -> distribution

``mrsd clone sdist://collective/buildout/plone.recipe.precompiler/<branch>/subdir?rev=134255#metadata``

``mrsd get patch://collective/buildout/plone.recipe.precompiler/<branch>/134255#committer``

``mrsd clone repo://github/garbas/mrs.developer#<rev>``

``mrsd cherry-pick repo://github/garbas/mrs.developer#<rev>``



  subdir in repo

  % mrsd remote add collective https://svn.plone.org/svn/plone

  query
  fragment -> used for a fragment of a distribution




``mrsd clone pypi/plone.recipe.precompiler

sdist://plonecollective/build/plone.recipe.compiler/foo?buildout/uhilhe#134255
sdist://plonecollective/build/plone.recipe.compiler/foo
py24egg://pypi/plone.recipe.precompiler#1.2
projectdir/foo/bar
cache://home/plone.recipe.precompiler-0.4-py2.6.egg



In a channel each 
package/project is uniquely identified by its name. A channel can have
arbitrarly nested subchannels, providing namespaces for packages, directories
on the filesystem as an example.

    ``[<channel>:][<subchannel>/]<package>[/|-<revision>][-|/<flavour>]``

Examples:

    pypi:mrs.developer

    pypi:mrs.developer-0.9-sdist
    pypi:mrs.developer-0.9-source
    pypi:mrs.developer-0.9-src

    pypi:mrs.developer-0.9-py2.4 
    pypi:mrs.developer-0.9-py2.6

    pypi:mrs.developer:0.9:py2.6

    gitcollective:mrs.developer (use the default branch)
    gitcollective:mrs.developer/<revision> (man git-rev-parse)

    collective:buildout/plone.recipe.precompiler (trunk or direct)
    collective:buildout/plone.recipe.precompiler/<revision> (same logic as
    git-rev-parse)
    collective:buildout/plone.recipe.precompiler/trunk@revision

    [local:]src/my.egg

List known channels 
::
    % mrsd channel list
    foo


    cache24:mrs.developer   (will only look for py2.4 flavour)
    cache26:mrs.developer
    repocache:mrs.developer

A branch is a channel

path to a profile

    gitrok: -> github.com/garbas/
    gitrok:mrsd.profiles/tagfoo/plone4

    rokprofiles:plone4

    % mrsd clone pypi:mrs.developer-0.9

    % mrsd clone gc:mrs.developer



Known channels


has a unique name and 

Known channels
PyPI
cache
buildout cache
repo cache

List all distributions in the default distro
    % mrsd list

    % mrsd list <distspace>


TODO:

    % mrsd channel add
    % mrsd channel remove


Source distribution / develop egg management
--------------------------------------------

List packages available for development
::
    % mrsd develop
    ...
    % mrsd develop --list
    ...

Develop eggs, will clone sources and activate them
::
    % mrsd develop <eggspace>
    ...
    % mrsd develop --activate <eggspace>
    ...
    % mrsd develop --deactivate <eggspace>
    ...

Clone sources
::
    % mrsd clone --sdist <eggspace>
    ...

Clone and activate source
::
    % mrsd clone --sdist <eggspace>
    ...
