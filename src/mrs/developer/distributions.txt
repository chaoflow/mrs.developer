Buildout integration
====================

In order to use mrsd for a buildout managed project, add mrs.developer
as an extension to buildout.

.. code-block:: console

    % cat buildout.cfg
    [buildout]
    extensions = mrs.developer
    parts = example
    # mrsd.developer sdist is linked at ./mrs.developer
    # egg-info was created/updated already (see DEVELOPER.txt)
    # not needed, if you fetch via pypi, once it is released
    develop = mrs.developer

    # An example script that uses an egg, which we are going to customize
    [example]
    recipe = zc.recipe.egg
    eggs =
        odict
    interpreter = example-py

XXX: adjust buildout.cfg in skel, removed mrs.developer from eggs as it
is misleading. mrs.developer works also if not mentioned anywhere except as an
extension

Mrsd will automatically hook into all scripts generated by buildout, for now we
assume these are all scripts in ``bin``, that use sys.path[0:0] injection and
are not blacklisted. Blacklisted is for example ``bin/buildout``.

.. todo:: Use .installed.cfg for finding scripts to hook into

Buildout was already run for us and mrsd is initialized and hooked in.

.. code-block:: console

    % ls -1a
    .
    ..
    .installed.cfg
    .mrsd
    bin
    bootstrap.py
    buildout.cfg
    develop-eggs
    eggs
    eggs-patches
    init.cfg
    mrs.developer
    parts

The full persistent configuration is in .mrsd:

.. code-block:: console

    % cat .mrsd
    {
        "patches_dir": "eggs-patches",
        "scripts_dir": "bin"
    }

Mrsd hooked into the python scripts as described above:

.. code-block:: console

    % cat bin/example-py
    ...mrs.developer: inject our paths upfront
    try:
        import json
    except ImportError:
        import simplejson as json
    from subprocess import Popen, PIPE
    
    mrsdpaths = Popen(
           ["mrsd", "list", "cloned"],
           stdout=PIPE,
           ).communicate()[0]
    if mrsdpaths:
        sys.path[0:0] = json.loads(mrsdpaths)
    ...mrs.developer: end.
    ...

Calling ``mrsd hookin`` will remove old hooks and recreate them

.. code-block:: console

    % ./bin/mrsd hookin
    INFO:mrsd:Hooked out: /.../bin/example-py.
    INFO:mrsd:Hooked in: /.../bin/example-py.

A hooked in mrsd injects sys.paths into scripts:

.. code-block:: console

    % cat ./bin/example-py
    ...
        '/.../eggs/zope.event-3.5.0_1-py2.6.egg',
        ]
    
    ...mrs.developer: inject our paths upfront
    try:
        import json
    except ImportError:
        import simplejson as json
    from subprocess import Popen, PIPE
    
    mrsdpaths = Popen(
           ["mrsd", "list", "cloned"],
           stdout=PIPE,
           ).communicate()[0]
    if mrsdpaths:
        sys.path[0:0] = json.loads(mrsdpaths)
    ...mrs.developer: end.
    
    _interactive = True
    ...

``mrsd hookout`` will remove the hooks from all scripts:

.. code-block:: console

    % ./bin/mrsd hookout
    INFO:mrsd:Hooked out: /.../bin/example-py.

    % cat ./bin/example-py
    ...
        '/.../eggs/zope.event-3.5.0_1-py2.6.egg',
        ]
    
    _interactive = True
    ...

    % ./bin/mrsd hookin
    INFO:mrsd:Hooked in: /.../bin/example-py.

    % cat ./bin/example-py
    ...
        '/.../eggs/zope.event-3.5.0_1-py2.6.egg',
        ]
    
    ...mrs.developer: inject our paths upfront
    try:
        import json
    except ImportError:
        import simplejson as json
    from subprocess import Popen, PIPE
    
    mrsdpaths = Popen(
           ["mrsd", "list", "cloned"],
           stdout=PIPE,
           ).communicate()[0]
    if mrsdpaths:
        sys.path[0:0] = json.loads(mrsdpaths)
    ...mrs.developer: end.
    
    _interactive = True
    ...
    

.. todo:: hookin hookout from specific scripts

#XXX.. code-block:: console

    % ./bin/mrsd status

#XXX.. code-block:: console

    % ./bin/mrsd activate

#XXX.. code-block:: console

    % ./bin/mrsd status

#XXX.. code-block:: console

    % ./bin/mrsd deactivate

#XXX.. code-block:: console

    % ./bin/mrsd status


Distributions
=============

There are source and binary distributions. One or more binary distributions are
built from one source distribution. A binary distribution can be specific to
the target architecture and in case of python, the python version.

Channels are the source for binary and source distributions, PyPI, the Plone
collective and the buildout cache are examples.

.. todo:: link to detailed description of channels once it exists

Normally you are using source and binary distributions from a cache, except if
you want to make changes to it. The distributions in cache are called *stock*
distributions. If you want to make changes to a distribution you create a clone
of it, local to your mrsd project. This means that normally there will be no
distributions in your buildout folder, except if you are working on them or
they differ from the stock versions.

In order to make changes to a stock distribution, you clone it. Calling ``mrsd
clone`` without arguments will list all distributions available for cloning:
.. code-block:: console

    % ./bin/mrsd clone


Binary distributions
--------------------

Clone a binary distribution, it will be copied to ``eggs-mrsd/``, initialized
as a git repository with an inital commit, tagged initial, referencing the
origin.  Sorry, here we only support git for now, feel free to provide
configurable support for some other DVCS (see CONTRIBUTE.txt). For a full
documentation of ``mrsd clone`` see clone.txt).
.. code-block:: console

    % ./bin/mrsd clone odict

    % ls eggs-mrsd

    % (cd eggs-mrsd/odict && git log)

    % (cd eggs-mrsd/odict && git tag)

XXX: mrsd list might change if we support per script distributions and source
distributions

``mrsd list cloned`` will list it now, our hook (see above) will use this for
injecting it into the correponding scripts' sys.path:
.. code-block:: console

    % mrsd list cloned

By default the newly clone distribution will be activated for all scripts, this
might change in the future
.. code-block:: console

    % ./bin/example-py -c 'import zodict; print zodict.__file'

Let's make some changes and commit some of them:
#.. code-block:: console

    % touch a b c
    % git commit -m 'committed a' a
    % git commit -m 'committed b' b
    % git log
    % git status --procelain

Persistent your changes for deployment
#.. code-block:: console

    % mrsd patch
    % mrsd patch generate
    % mrsd patch

    % rm eggs-mrsd

    % mrsd list

    % mrsd patch apply

    % mrsd list











WIP below here, kind of an attic








Commands for working with distributions are:

``mrsd list``
    list all used distributions

``mrsd clone``
    clone a distribution into your mrsd environment

``mrsd patch``
    generate/apply patches


XXX: what is really listed by mrsd list?
- all really used?
- all listed in some pyscripts sys.path?
- find-links usage?

List all distributions, stock and cloned:

.. code-block:: console

    % ./bin/mrsd list
    [
        "/.../eggs/distribute-0.6.14-py2.6.egg",
        "/.../eggs/zc.buildout-1.5.1-py2.6.egg",
        "/.../eggs/piratebay-0.3.1-py2.6.egg",
        "/.../eggs/zope.location-3.9.0-py2.6.egg",
        "/.../eggs/odict-1.3.2-py2.6.egg",
        "/.../eggs/zope.proxy-3.6.1-py2.6...egg",
        "/.../eggs/zope.component-3.9.5-py2.6.egg",
        "/.../eggs/zope.schema-3.6.4-py2.6.egg",
        "/.../eggs/zope.interface-3.6.1-py2.6-...egg",
        "/.../eggs/zope.event-3.5.0_1-py2.6.egg"
    ]

#XXX.. code-block:: console

    % ./bin/mrsd list stock










List all patched distributions, the ones having branches created from the
initial commit with patches from ``eggs-patches`` applied:

.. code-block:: console

    % ./bin/mrsd list patched

.. todo:: mrsd patched

List all distributions that are used in the current project and that are not
cloned already:

.. code-block:: console

    % ./bin/mrsd clone


Source distributions
--------------------

Clone a source distribution:
::
    % mrsd clone <sth were only source is available>

    % ls src-mrsd




Calling mList all distributions available for cloning:
::
    % mrsd clone

behind the scenes:

    % mrsd list <default_distspace>


Clone distributions:
::
    % mrsd clone <distspace>





    % mrsd clone 


    % mrsd 

List available distributions


    mrsd clone global/
    mrsd clone plonecollective/build/...
    mrsd clone cache|home|user/
    mrsd clone local/plonecollective 
    mrsd clone ./plonecollective 

    The path points to a package


``mrsd clone collective/buildout/plone.recipe.precompiler``
  point to trunk or directly 
  points to package

``mrsd clone collective/buildout/plone.recipe.precompiler/<branch>``
  a collection of distributions, a package
  points to package

``mrsd clone collective/buildout/plone.recipe.precompiler/<tag>``
  a package with only one distribution, therefore a distribution

``mrsd clone collective/buildout/plone.recipe.precompiler/<branch>/subdir?rev=134255``
  version/revision -> distribution

``mrsd clone sdist://collective/buildout/plone.recipe.precompiler/<branch>/subdir?rev=134255#metadata``

``mrsd get patch://collective/buildout/plone.recipe.precompiler/<branch>/134255#committer``

``mrsd clone repo://github/garbas/mrs.developer#<rev>``

``mrsd cherry-pick repo://github/garbas/mrs.developer#<rev>``



  subdir in repo

  % mrsd remote add collective https://svn.plone.org/svn/plone

  query
  fragment -> used for a fragment of a distribution




``mrsd clone pypi/plone.recipe.precompiler

sdist://plonecollective/build/plone.recipe.compiler/foo?buildout/uhilhe#134255
sdist://plonecollective/build/plone.recipe.compiler/foo
py24egg://pypi/plone.recipe.precompiler#1.2
projectdir/foo/bar
cache://home/plone.recipe.precompiler-0.4-py2.6.egg



In a channel each 
package/project is uniquely identified by its name. A channel can have
arbitrarly nested subchannels, providing namespaces for packages, directories
on the filesystem as an example.

    ``[<channel>:][<subchannel>/]<package>[/|-<revision>][-|/<flavour>]``

Examples:

    pypi:mrs.developer

    pypi:mrs.developer-0.9-sdist
    pypi:mrs.developer-0.9-source
    pypi:mrs.developer-0.9-src

    pypi:mrs.developer-0.9-py2.4 
    pypi:mrs.developer-0.9-py2.6

    pypi:mrs.developer:0.9:py2.6

    gitcollective:mrs.developer (use the default branch)
    gitcollective:mrs.developer/<revision> (man git-rev-parse)

    collective:buildout/plone.recipe.precompiler (trunk or direct)
    collective:buildout/plone.recipe.precompiler/<revision> (same logic as
    git-rev-parse)
    collective:buildout/plone.recipe.precompiler/trunk@revision

    [local:]src/my.egg

List known channels 
::
    % mrsd channel list
    foo


    cache24:mrs.developer   (will only look for py2.4 flavour)
    cache26:mrs.developer
    repocache:mrs.developer

A branch is a channel

path to a profile

    gitrok: -> github.com/garbas/
    gitrok:mrsd.profiles/tagfoo/plone4

    rokprofiles:plone4

    % mrsd clone pypi:mrs.developer-0.9

    % mrsd clone gc:mrs.developer



Known channels


has a unique name and 

Known channels
PyPI
cache
buildout cache
repo cache

List all distributions in the default distro
    % mrsd list

    % mrsd list <distspace>


TODO:

    % mrsd channel add
    % mrsd channel remove


Source distribution / develop egg management
--------------------------------------------

List packages available for development
::
    % mrsd develop
    ...
    % mrsd develop --list
    ...

Develop eggs, will clone sources and activate them
::
    % mrsd develop <eggspace>
    ...
    % mrsd develop --activate <eggspace>
    ...
    % mrsd develop --deactivate <eggspace>
    ...

Clone sources
::
    % mrsd clone --sdist <eggspace>
    ...

Clone and activate source
::
    % mrsd clone --sdist <eggspace>
    ...
